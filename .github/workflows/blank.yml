name: Conda Build & Upload

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        target_platform: [linux-64, linux-aarch64, linux-s390x, linux-ppc64le, linux-32, osx-64, osx-arm64]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          auto-activate-base: false
          miniconda-version: latest
          channels: conda-forge
          channel-priority: strict

      - name: Install conda-build & anaconda-client
        run: |
          conda install -y conda-build anaconda-client

      - name: Install Cross-Compilers (if needed)
        if: runner.os == 'Linux' && matrix.target_platform != 'linux-64'
        run: |
          echo "Installing cross-compiler for ${{ matrix.target_platform }}"
          conda install -y \
            "compilers_${{ matrix.target_platform }}" \
            "sysroot_${{ matrix.target_platform }}"

      - name: Install Clang on Mac (if needed for Xcode 15)
        if: runner.os == 'macOS'
        run: |
          conda install -y clang_osx-64 clangxx_osx-64

      - name: Build Conda Package
        run: |
          # Provide a YAML/JSON dictionary to --variants
          conda build . --variants "{\"target_platform\": \"${{ matrix.target_platform }}\"}"

      - name: Upload Package to Anaconda
        if: always()
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        run: |
          # Similarly for the --output command
          built_pkg=$(conda build . --output --variants "{\"target_platform\": \"${{ matrix.target_platform }}\"}")
          echo "Built package: $built_pkg"
          conda run -n base anaconda -t "$ANACONDA_API_TOKEN" upload \
            --user yaalshama --label main --force "$built_pkg"
