name: Conda Build & Upload

on:
  release:
    types: [published]

jobs:
  build:
    # We only truly have "ubuntu-latest" for x86_64 and "ubuntu-24.04-arm" for ARM.
    # We will add a linux-32 build by setting the subdir to "linux-32".
    # For macOS, we build both Intel and ARM as before.
    strategy:
      matrix:
        include:
          # --- Linux 64-bit (already in your original) ---
          - os: ubuntu-latest
            conda_subdir: linux-64

          # --- Linux 32-bit (new entry) ---
          - os: ubuntu-latest
            conda_subdir: linux-32

          # --- Linux ARM64 (already in your original) ---
          - os: ubuntu-24.04-arm
            conda_subdir: linux-aarch64

          # --- macOS Intel (already in your original) ---
          - os: macos-latest
            conda_subdir: osx-64

          # --- macOS ARM (already in your original) ---
          - os: macos-13
            conda_subdir: osx-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          auto-activate-base: false
          miniconda-version: latest
          channels: conda-forge, defaults
          channel-priority: strict
          # This original logic only covers ARM vs x86_64, so for cross-compiling 32-bit,
          # simply keep it as 'x64' since the runner is still 64-bit. 
          architecture: ${{ runner.arch == 'ARM64' && 'arm64' || 'x64' }}

      - name: Configure subdir (linux-32, linux-64, etc.)
        run: conda config --env --set subdir ${{ matrix.conda_subdir }}

      - name: Install conda-build & anaconda-client
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            arch=$(uname -m)
            if [[ "$arch" == "arm64" ]]; then
              echo "Detected macOS ARM64"
              conda install -y conda-build anaconda-client clang_osx-arm64 clangxx_osx-arm64
            else
              echo "Detected macOS Intel"
              conda install -y conda-build anaconda-client clang_osx-64 clangxx_osx-64
            fi
          else
            echo "Detected Linux"
            conda install -y conda-build anaconda-client
          fi

      - name: Build Conda Package
        env:
          CONDA_BLD_PATH: /tmp/bld
        run: |
          mkdir -p "$CONDA_BLD_PATH"
          # --croot is set to /tmp/bld, but we have told conda to use subdir = ${{ matrix.conda_subdir }}
          conda build ./conda_recipe --croot /tmp/bld 

      - name: Upload Package to Anaconda
        if: success()
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        run: |
          built_pkg=$(conda build ./conda_recipe --croot /tmp/bld --output)
          echo "Built package: $built_pkg"
          conda run -n base anaconda -t "$ANACONDA_API_TOKEN" upload \
            --user yaalshama --label main --force "$built_pkg"
